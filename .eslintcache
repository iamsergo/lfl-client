[{"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\index.tsx":"1","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\App.tsx":"2","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Tournament\\index.tsx":"3","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\getGamesByTour.ts":"4","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Team\\index.tsx":"5","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\getGamesByClub.ts":"6","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Game\\index.tsx":"7","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Tournaments\\index.tsx":"8","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\store.ts":"9","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\rootReducer.ts":"10","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\navigation.ts":"11","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\constans\\index.ts":"12","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\tournaments.ts":"13","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\index.ts":"14","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\games.ts":"15","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\tournaments.ts":"16","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\squads.ts":"17","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\BASE_URL.ts":"18","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\request.ts":"19","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\tournament.ts":"20","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\team.ts":"21","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\game.ts":"22","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Headers\\PlainHeader.tsx":"23","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Headers\\GameHeader.tsx":"24","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\GameInfoTabs\\index.tsx":"25","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\GamesList\\index.tsx":"26","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Table\\TableRow.tsx":"27","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\EventRow\\index.tsx":"28","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\ListHeader\\index.tsx":"29","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\user.ts":"30","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Prediction\\index.tsx":"31","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\predictions.ts":"32","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\predictions.ts":"33","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\user.ts":"34","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\nowLessThen.ts":"35","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\popout.ts":"36"},{"size":544,"mtime":1612547576319,"results":"37","hashOfConfig":"38"},{"size":3172,"mtime":1612595742764,"results":"39","hashOfConfig":"38"},{"size":5999,"mtime":1612595742844,"results":"40","hashOfConfig":"38"},{"size":354,"mtime":1611816832719,"results":"41","hashOfConfig":"38"},{"size":3938,"mtime":1612508532673,"results":"42","hashOfConfig":"38"},{"size":206,"mtime":1611753256674,"results":"43","hashOfConfig":"38"},{"size":7121,"mtime":1612110480070,"results":"44","hashOfConfig":"38"},{"size":5619,"mtime":1612546234806,"results":"45","hashOfConfig":"38"},{"size":291,"mtime":1611856366447,"results":"46","hashOfConfig":"38"},{"size":562,"mtime":1612595742850,"results":"47","hashOfConfig":"38"},{"size":1009,"mtime":1612109867198,"results":"48","hashOfConfig":"38"},{"size":160,"mtime":1611779158990,"results":"49","hashOfConfig":"38"},{"size":1450,"mtime":1611998738393,"results":"50","hashOfConfig":"38"},{"size":400,"mtime":1612335360799,"results":"51","hashOfConfig":"38"},{"size":209,"mtime":1612092061592,"results":"52","hashOfConfig":"38"},{"size":411,"mtime":1612546969012,"results":"53","hashOfConfig":"38"},{"size":272,"mtime":1611778173653,"results":"54","hashOfConfig":"38"},{"size":108,"mtime":1612539588111,"results":"55","hashOfConfig":"38"},{"size":104,"mtime":1611778010684,"results":"56","hashOfConfig":"38"},{"size":2142,"mtime":1612529248428,"results":"57","hashOfConfig":"38"},{"size":2087,"mtime":1612113083100,"results":"58","hashOfConfig":"38"},{"size":2497,"mtime":1612595743003,"results":"59","hashOfConfig":"38"},{"size":1043,"mtime":1612538759231,"results":"60","hashOfConfig":"38"},{"size":1134,"mtime":1611967846577,"results":"61","hashOfConfig":"38"},{"size":1107,"mtime":1611966883106,"results":"62","hashOfConfig":"38"},{"size":2008,"mtime":1612595742828,"results":"63","hashOfConfig":"38"},{"size":1287,"mtime":1612108879539,"results":"64","hashOfConfig":"38"},{"size":640,"mtime":1611965479659,"results":"65","hashOfConfig":"38"},{"size":595,"mtime":1612002832923,"results":"66","hashOfConfig":"38"},{"size":1302,"mtime":1612086632767,"results":"67","hashOfConfig":"38"},{"size":2270,"mtime":1612109396518,"results":"68","hashOfConfig":"38"},{"size":638,"mtime":1612081063560,"results":"69","hashOfConfig":"38"},{"size":1951,"mtime":1612089898128,"results":"70","hashOfConfig":"38"},{"size":458,"mtime":1612086598622,"results":"71","hashOfConfig":"38"},{"size":237,"mtime":1612088675264,"results":"72","hashOfConfig":"38"},{"size":464,"mtime":1612594034154,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},"mhq12z",{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"76"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"76"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"76"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"76"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"76"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"76"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"140"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"76"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"76"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\index.tsx",[],["156","157"],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\App.tsx",["158","159"],"import React from 'react';\r\n\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport {AdaptivityProvider, AppRoot, ConfigProvider, ScreenSpinner, View} from '@vkontakte/vkui';\r\n\r\nimport TournamentPanel from './panels/Tournament';\r\nimport TeamPanel from './panels/Team';\r\nimport GamePanel from './panels/Game';\r\nimport TournamentsPanel from './panels/Tournaments';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from './store/rootReducer';\r\nimport { GAME_PANEL, TEAM_PANEL, TOURNAMENTS_PANEL, TOURNAMENT_PANEL } from './constans';\r\nimport { requestTournaments } from './store/slices/tournaments';\r\nimport { requestUser } from './store/slices/user';\r\nimport { goBack } from './store/slices/navigation';\r\nimport { clearActiveGame, goBackToGame } from './store/slices/game';\r\nimport { clearActiveteam, goBackToTeam } from './store/slices/team';\r\nimport { clearPredictionsInfo } from './store/slices/predictions';\r\nimport { clearActiveTournament, setActiveTab as setActiveTournamentTab } from './store/slices/tournament';\r\nimport { setActiveTab as setActiveTeamTab } from './store/slices/team';\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  const {activePanel, history} = useSelector((s:RootState) => s.navigation)\r\n  const {loading : loadingTournaments, cities} = useSelector((s:RootState) => s.tournaments)\r\n  const {loading : loadingTournament} = useSelector((s:RootState) => s.tournament)\r\n  const {loading : loadingUser} = useSelector((s:RootState) => s.user)\r\n\r\n  React.useEffect(() => {\r\n    const initApp = async () => {\r\n      const userInfo = await bridge.send('VKWebAppGetUserInfo')\r\n      // const userInfo = {id : 17}\r\n      dispatch(requestUser(userInfo.id))\r\n      dispatch(requestTournaments())\r\n      bridge.send('VKWebAppEnableSwipeBack').then(res=>res).catch(err=>err)\r\n    }\r\n    \r\n    initApp()\r\n  },[])\r\n\r\n  const goToBack = () => {\r\n    const currentPanel = history[history.length-1]\r\n    const newPanel = history[history.length-2]\r\n    \r\n    if(currentPanel === 'team')\r\n    {\r\n      if(newPanel === 'game') dispatch(goBackToGame())\r\n\r\n      dispatch(clearActiveteam())\r\n    }\r\n    else if(currentPanel === 'game')\r\n    {\r\n      if(newPanel === 'team') dispatch(goBackToTeam())\r\n\r\n      dispatch(clearActiveGame())\r\n      dispatch(clearPredictionsInfo())\r\n    }\r\n    \r\n    if(newPanel === 'tournaments')\r\n    {\r\n      dispatch(setActiveTournamentTab(0))\r\n      dispatch(clearActiveTournament())\r\n    }\r\n    else if(newPanel === 'tournament')\r\n    {\r\n      dispatch(setActiveTeamTab(0))\r\n    }\r\n\r\n    dispatch(goBack())\r\n  }\r\n\r\n  return (\r\n    <ConfigProvider isWebView={true}>\r\n      <AppRoot>\r\n        <View\r\n          activePanel={activePanel}\r\n          onSwipeBack={goToBack}\r\n          history={history}\r\n          popout={(loadingTournaments || loadingUser || loadingTournament) && <ScreenSpinner />}\r\n        >\r\n          <TournamentsPanel id={TOURNAMENTS_PANEL} cities={cities}/>\r\n          <TournamentPanel id={TOURNAMENT_PANEL}/>\r\n          <GamePanel id={GAME_PANEL}/>\r\n          <TeamPanel id={TEAM_PANEL}/>\r\n        </View>\r\n      </AppRoot>\r\n    </ConfigProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Tournament\\index.tsx",["160","161","162","163"],"import React from 'react';\r\n\r\nimport {\r\n  Cell,\r\n  HorizontalScroll, \r\n  List, \r\n  Panel, \r\n  PanelHeader, \r\n  PanelHeaderBack, \r\n  Tabs, \r\n  TabsItem\r\n} from '@vkontakte/vkui';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { goBack, goForward } from '../../store/slices/navigation';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { clearActiveTournament, setActiveTab } from '../../store/slices/tournament';\r\nimport { requestSquad, setActiveTeam} from '../../store/slices/team';\r\nimport { setActiveGameInfo } from '../../store/slices/game';\r\n\r\nimport PlainHeader from '../../components/Headers/PlainHeader';\r\nimport GamesList from '../../components/GamesList';\r\nimport TableRow from '../../components/Table/TableRow';\r\n\r\nimport { GameInfo } from '../../types/GameInfo';\r\nimport { ClubInfo } from '../../types/ClubInfo';\r\n\r\nimport { getGamesByTours } from '../../utils/getGamesByTour';\r\nimport { GAME_PANEL, TEAM_PANEL } from '../../constans';\r\n\r\ninterface TournamentPanelProps\r\n{\r\n  id : string\r\n}\r\n\r\nconst TABS = [ 'Таблица', 'Расписание', 'Результаты']\r\n\r\nconst TournamentPanel : React.FC<TournamentPanelProps> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useDispatch()\r\n  const {activeTournament,activeTournamentName,activeTournamentCity,activeTab,activeSiteType,activeVkHref} = useSelector((s:RootState) => s.tournament)\r\n\r\n  const goToTeam = (team : ClubInfo) => {\r\n    dispatch(setActiveTeam(team))\r\n    dispatch(goForward(TEAM_PANEL))\r\n  }\r\n\r\n  const goToGame = (game : GameInfo) => {\r\n    console.log(game)\r\n    if(game.date === '-' && !game.score) return\r\n    \r\n    dispatch(setActiveGameInfo(game))\r\n    dispatch(goForward(GAME_PANEL))\r\n  }\r\n\r\n  const goToTournaments = () => {\r\n    dispatch(goBack())\r\n    dispatch(clearActiveTournament())\r\n    dispatch(setActiveTab(0))\r\n  }\r\n\r\n  return(\r\n    <Panel id={id}>\r\n      <PanelHeader\r\n        left={<PanelHeaderBack onClick={goToTournaments} />}\r\n      >Турнир</PanelHeader>\r\n      \r\n      <PlainHeader\r\n        hrefs={[\r\n          activeSiteType === 0\r\n            ? `https://lfl.ru/tournament${activeTournament?.tournamentId}`\r\n            : `https://www.goalstream.org/season/${activeTournament?.tournamentId}`,\r\n          activeVkHref\r\n        ]}\r\n        title={activeTournamentName}\r\n        city={activeTournamentCity}\r\n      />\r\n      <HorizontalScroll>\r\n        <Tabs mode=\"buttons\">\r\n          {TABS.map((tab,i) => {\r\n            return <TabsItem\r\n              key={i}\r\n              selected={activeTab === i}\r\n              onClick={() => dispatch(setActiveTab(i))}\r\n            >{tab}</TabsItem>\r\n          })}\r\n        </Tabs>\r\n      </HorizontalScroll>\r\n\r\n      \r\n      {activeTab === 0 && activeTournament &&\r\n        <List>\r\n          <TableRow\r\n            isHeader={true}\r\n            title={'Команда'}\r\n            values={['И','В','Н','П','О']}\r\n            colors={['','green','orange','red']}\r\n          />\r\n          {\r\n            activeTournament.table.map((team,i) => {\r\n              if(team.title === '') return\r\n\r\n              return team.title\r\n                ? <Cell\r\n                    key={i}\r\n                    disabled\r\n                    style={{fontWeight:'bold'}}\r\n                  >{team.title}</Cell>\r\n                : <TableRow\r\n                    key={i}\r\n                    n={team.place}\r\n                    title={team.name}\r\n                    photo={team.logo}\r\n                    onClick={() => goToTeam(team)}\r\n                    values={[team.win+team.draw+team.lose,team.win,team.draw,team.lose,team.points].map(n=>''+n)}\r\n                    colors={['','green','orange','red']}\r\n                    isDark={i % 2 === 0}\r\n                  />\r\n            })\r\n          }\r\n        </List>\r\n      }\r\n\r\n      {activeTab === 1 && activeTournament &&\r\n        Object.entries(getGamesByTours(activeTournament.calendar))\r\n          .map(([tour, games],i) => {\r\n            return <GamesList\r\n              key={i}\r\n              header={`${tour} ТУР`}\r\n              games={games}\r\n              onGoToGame={goToGame} // !!!!\r\n            />\r\n          })\r\n      }\r\n\r\n      {activeTab === 2 && activeTournament &&\r\n        Object.entries(getGamesByTours(activeTournament.results)).reverse()\r\n          .map(([tour, games],i) => {\r\n            return <GamesList\r\n              key={i}\r\n              header={`${tour} ТУР`}\r\n              games={games}\r\n              onGoToGame={goToGame}\r\n            />\r\n          })\r\n      }\r\n\r\n      {/* {activeTab === 3 && activeTournament &&\r\n        <List>\r\n          <TableRow\r\n              isHeader={true}\r\n              title={'Игрок'}\r\n              values={['Г']}\r\n              colors={[]}\r\n            />\r\n          {\r\n            activeTournament.strikers.map((player,i) => {\r\n              return <TableRow\r\n                key={i}\r\n                n={i+1}\r\n                title={player.playerName}\r\n                photo={player.playerPhoto}\r\n                description={player.teamName}\r\n                values={[''+player.points]}\r\n                colors={[]}\r\n                isDark={i % 2 === 0}\r\n              />\r\n            })\r\n          }\r\n        </List>\r\n      }\r\n\r\n      {activeTab === 4 && activeTournament &&\r\n        <List>\r\n          <TableRow\r\n              isHeader={true}\r\n              title={'Игрок'}\r\n              values={['А']}\r\n              colors={[]}\r\n            />\r\n          {\r\n            activeTournament.assistents.map((player,i) => {\r\n              return <TableRow\r\n                key={i}\r\n                n={i+1}\r\n                title={player.playerName}\r\n                photo={player.playerPhoto}\r\n                description={player.teamName}\r\n                values={[''+player.points]}\r\n                colors={[]}\r\n                isDark={i % 2 === 0}\r\n              />\r\n            })\r\n          }\r\n        </List>\r\n      } */}\r\n\r\n\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default TournamentPanel","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\getGamesByTour.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Team\\index.tsx",["164","165","166","167","168","169","170"],"import React from 'react';\r\n\r\n\r\nimport {\r\n  Div,\r\n  Group,\r\n  HorizontalScroll,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelHeaderBack,\r\n  Spinner,\r\n  Tabs,\r\n  TabsItem\r\n} from '@vkontakte/vkui';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { goBack, goForward } from '../../store/slices/navigation';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { clearActiveteam, goForwardToTeam,setActiveTab } from '../../store/slices/team';\r\nimport { goBackToGame, setActiveGameInfo } from '../../store/slices/game';\r\n\r\nimport PlainHeader from '../../components/Headers/PlainHeader';\r\nimport GamesList from '../../components/GamesList';\r\nimport TableRow from '../../components/Table/TableRow';\r\n\r\nimport { GameInfo } from '../../types/GameInfo';\r\n\r\nimport { GAME_PANEL } from '../../constans';\r\n\r\ninterface TeamPanelProps\r\n{\r\n  id : string\r\n}\r\n\r\n// const TABS = [ 'Расписание', 'Результаты', 'Состав' ]\r\nconst TABS = [ 'Расписание', 'Результаты']\r\n\r\nconst TeamPanel : React.FC<TeamPanelProps> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useDispatch()\r\n  const { activeTeamSquad, loading, activeTeam, activeTab } = useSelector((s:RootState) => s.team)\r\n  const {history} = useSelector((s:RootState) => s.navigation)\r\n  const {activeTournament,activeTournamentCity,activeTournamentName} = useSelector((s:RootState) => s.tournament)\r\n\r\n  const goToBack = () => {\r\n    const isToGame = history[history.length-2] === 'game'\r\n    if(isToGame) dispatch(goBackToGame())\r\n\r\n    dispatch(goBack())\r\n    dispatch(clearActiveteam())\r\n  }\r\n\r\n  const goToGame = (game : GameInfo) => {\r\n    if(game.date === '-' && !game.score) return\r\n\r\n    dispatch(goForwardToTeam())\r\n    dispatch(setActiveGameInfo(game))\r\n    dispatch(goForward(GAME_PANEL))\r\n  }\r\n\r\n  return(\r\n    <Panel id={id}>\r\n      <PanelHeader\r\n        left={<PanelHeaderBack onClick={goToBack} />}\r\n      >Команда</PanelHeader>\r\n\r\n      {activeTeam && <>\r\n        <PlainHeader\r\n          logo={activeTeam.logo}\r\n          title={activeTeam.name}\r\n          city={activeTournamentCity}\r\n        />\r\n        <HorizontalScroll>\r\n          <Tabs mode=\"buttons\">\r\n            {TABS.map((tab,i) => {\r\n              return <TabsItem\r\n                key={i}\r\n                selected={activeTab === i}\r\n                onClick={() => dispatch(setActiveTab(i))}\r\n              >{tab}</TabsItem>\r\n            })}\r\n          </Tabs>\r\n        </HorizontalScroll>\r\n      </>}\r\n\r\n      \r\n      {activeTab === 0 && activeTeam &&\r\n        <GamesList\r\n          games={activeTournament!.calendar.filter(g => g.homeHref === activeTeam.href || g.awayHref === activeTeam.href )}\r\n          onGoToGame={goToGame}\r\n        />\r\n      }\r\n\r\n      {activeTab === 1 && activeTeam &&\r\n        <GamesList\r\n          teamHref={activeTeam.href}\r\n          games={activeTournament!.results.filter(g => g.homeHref === activeTeam.href || g.awayHref === activeTeam.href )}\r\n          onGoToGame={goToGame}\r\n        />\r\n      }\r\n\r\n      {/* {activeTab === 2 && activeTeam &&\r\n        <Group>\r\n          <TableRow\r\n            isHeader={true}\r\n            title={'Игрок'}\r\n            values={['И', 'Г','А','Ж','К']}\r\n            colors={['','green','gray','orange','red']}\r\n          />\r\n          {\r\n            loading\r\n              ? <Div><Spinner/></Div>\r\n              : activeTeamSquad.map((player,i) => {\r\n                return <TableRow\r\n                  key={i}\r\n                  title={player.playerName}\r\n                  photo={player.playerPhoto}\r\n                  description={player.amplua}\r\n                  values={[player.games,player.goals,player.assists,player.yc,player.rc].map(n=>''+n)}\r\n                  colors={['','green','gray','orange','red']}\r\n                  isDark={i % 2 === 0}\r\n                />\r\n              })\r\n          }\r\n        </Group>\r\n      } */}\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default TeamPanel","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\getGamesByClub.ts",[],["171","172"],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Game\\index.tsx",["173"],"import React from 'react';\r\n\r\nimport {\r\n  Cell,\r\n  Div,\r\n  HorizontalScroll,\r\n  List,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelHeaderBack,\r\n  Placeholder,\r\n  Spinner,\r\n  Tabs,\r\n  TabsItem\r\n} from '@vkontakte/vkui';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { goBack, goForward } from '../../store/slices/navigation';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { goBackToTeam, requestSquad, setActiveTeam } from '../../store/slices/team';\r\nimport { clearActiveGame, goForwardToGame, requestGame } from '../../store/slices/game';\r\nimport {useAppDispatch} from '../../store/store';\r\n\r\nimport GameHeader from '../../components/Headers/GameHeader';\r\nimport GameInfoTabs from '../../components/GameInfoTabs';\r\nimport EventRow from '../../components/EventRow';\r\n\r\nimport { TEAM_PANEL } from '../../constans';\r\n\r\nimport { ClubInfo } from '../../types/ClubInfo';\r\nimport Prediction from '../../components/Prediction';\r\nimport { requestDoPrediction, requestPredictions, clearPredictionsInfo } from '../../store/slices/predictions';\r\nimport { addPrediction } from '../../store/slices/user';\r\nimport { nowLessThen } from '../../utils/nowLessThen';\r\n\r\ninterface GamePanelProps\r\n{\r\n  id : string\r\n}\r\n\r\nconst TABS = [ 'События', 'Составы',]\r\n\r\nconst GamePanel : React.FC<GamePanelProps> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n  const {history} = useSelector((s:RootState) => s.navigation)\r\n  const {activeGameInfo,activeGameEvents,loading} = useSelector((s:RootState) => s.game)\r\n  const {activeTournament} = useSelector((s:RootState) => s.tournament)\r\n  const {user} = useSelector((s:RootState) => s.user)\r\n  const {predictionsInfo, loading : loadingPrediction} = useSelector((s:RootState) => s.predictions)\r\n\r\n  const [activeTab, setActiveTab] = React.useState(0)\r\n  const [activeTeamTab, setActiveTeamTab] = React.useState(0)\r\n  const [userPrediction, setUserPrediction] = React.useState<0|1|null>(null)\r\n\r\n  const canPredict = nowLessThen(\r\n    activeGameInfo.date.split(' ')[0].split('.').map(s=>+s),\r\n    activeGameInfo.time.split(':').map(s=>+s)\r\n  )\r\n\r\n  const goToBack = () => {\r\n    const isToTeam = history[history.length-2] === 'team'\r\n    if(isToTeam) dispatch(goBackToTeam())\r\n    \r\n    dispatch(goBack())\r\n    dispatch(clearActiveGame())\r\n    dispatch(clearPredictionsInfo())\r\n  }\r\n\r\n  const goToTeam = (team : ClubInfo) => {\r\n    const tournamentId = activeTournament!.tournamentId\r\n    const clubId = team.href.replace('/club','')\r\n\r\n    dispatch(goForwardToGame())\r\n    \r\n    dispatch(setActiveTeam(team))\r\n    dispatch(goForward(TEAM_PANEL))\r\n\r\n    dispatch(clearActiveGame())\r\n    dispatch(clearPredictionsInfo())\r\n\r\n    dispatch(requestSquad({tournamentId, clubId}))\r\n  }\r\n\r\n  const doPredict = (prediction : 0 | 1) => {\r\n    const matchId = +activeGameInfo.matchHref.replace('/match','').replace('/empty_protocol','')\r\n    dispatch(addPrediction({matchId, prediction}))\r\n    dispatch(requestDoPrediction({ matchId, prediction, userId : user!.id, }))\r\n      .then(_ => dispatch(requestPredictions(matchId)))\r\n    setUserPrediction(prediction)\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if(activeGameEvents) return\r\n\r\n    if(activeGameInfo.matchHref.includes('/empty_protocol'))\r\n    {\r\n      const matchId = +activeGameInfo.matchHref.replace('/match','').replace('/empty_protocol','')\r\n      const prediction = user!.predictions.find(p => p.matchId === matchId)\r\n      if(prediction)\r\n      {\r\n        setUserPrediction(prediction.prediction)\r\n      }\r\n\r\n      if(!canPredict || !!prediction)\r\n        dispatch(requestPredictions(matchId))\r\n      return\r\n    }\r\n\r\n    const req = dispatch(requestGame(+activeGameInfo.matchHref.replace('/match','')))\r\n    return () => {\r\n      req.abort()\r\n    }\r\n  },[])\r\n\r\n  const home = {\r\n    name : activeGameInfo.homeName,\r\n    href : activeGameInfo.homeHref,\r\n    logo : activeGameInfo.homeLogo,\r\n  }\r\n  \r\n  const away = {\r\n    name : activeGameInfo.awayName,\r\n    href : activeGameInfo.awayHref,\r\n    logo : activeGameInfo.awayLogo,\r\n  }\r\n\r\n  const noInformation = activeGameEvents && !activeGameEvents.squads.some(s => s.length > 0)\r\n\r\n  return(\r\n    <Panel id={id}>\r\n      <PanelHeader\r\n        left={<PanelHeaderBack onClick={goToBack} />}\r\n      >Матч</PanelHeader>\r\n\r\n      <GameHeader\r\n        home={home}\r\n        away={away}\r\n        score={!activeGameInfo.score ? '-:-' : activeGameInfo.score}\r\n        onGoToTeam={goToTeam}\r\n      />\r\n\r\n      <GameInfoTabs\r\n        date={activeGameInfo.date !== '-' ? `${activeGameInfo.date}, ${activeGameInfo.time}` : null}\r\n        refery={activeGameEvents && activeGameEvents.refery !== '-' ? activeGameEvents.refery : null}\r\n        place={activeGameEvents && activeGameEvents.place !== '-' ? activeGameEvents.place : null}\r\n      />\r\n\r\n      {!loading && !noInformation && activeGameInfo.score &&\r\n        <HorizontalScroll>\r\n          <Tabs mode=\"buttons\">\r\n            {TABS.map((tab,i) => {\r\n              return <TabsItem\r\n                key={i}\r\n                selected={activeTab === i}\r\n                onClick={() => setActiveTab(i)}\r\n              >{tab}</TabsItem>\r\n            })}\r\n          </Tabs>\r\n        </HorizontalScroll>\r\n      }\r\n      \r\n      {!activeGameInfo.score &&\r\n        <Prediction\r\n          canPredict={canPredict}\r\n          userPrediction={userPrediction}\r\n          predictionsInfo={predictionsInfo}\r\n          loading={loadingPrediction}\r\n          title=\"Количество голов\"\r\n          variants={['Больше 7', 'Не больше 7']}\r\n          onPrediction={doPredict}\r\n        />\r\n      }\r\n\r\n      {noInformation && <Placeholder>Нет информации</Placeholder>}\r\n      \r\n      {loading && <Div><Spinner/></Div>}\r\n\r\n\r\n      {!loading && activeTab === 0 && activeGameEvents &&\r\n        activeGameEvents.events.map((e,i) => {\r\n          let eventSymbol = ''\r\n          if(e.type === 'goal') eventSymbol = '⚽'\r\n          else if(e.type === 'assist') eventSymbol = '✅'\r\n          else if(e.type === 'yc') eventSymbol = '🟨'\r\n          else eventSymbol = '🟥'\r\n          \r\n          return <EventRow\r\n            key={i}\r\n            playerName={e.name}\r\n            eventType={eventSymbol}\r\n            isHome={e.team === 0}\r\n            minute={e.minute}\r\n          />\r\n        })\r\n      }\r\n\r\n      {!loading && activeTab === 1 && <>\r\n        <Tabs mode=\"buttons\">\r\n          {[activeGameInfo.homeName,activeGameInfo.awayName].map((team,i) => {\r\n            return <TabsItem\r\n              key={i}\r\n              selected={activeTeamTab === i}\r\n              onClick={() => setActiveTeamTab(i)}\r\n            >{team}</TabsItem>\r\n          })}\r\n        </Tabs>\r\n        <List>\r\n          {activeGameEvents &&\r\n            activeGameEvents.squads[activeTeamTab].map((player,i) => {\r\n              return <Cell\r\n                disabled\r\n                key={i}\r\n                description={activeGameInfo[activeTeamTab === 0 ? 'homeName' : 'awayName']}\r\n              >{player.name}</Cell>\r\n            })\r\n          }\r\n        </List>\r\n      </>}\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default GamePanel","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\panels\\Tournaments\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\store.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\rootReducer.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\navigation.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\constans\\index.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\tournaments.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\index.ts",["174"],"import {getGames} from './games'\r\nimport {getTournaments} from './tournaments'\r\nimport {getSquads} from './squads'\r\nimport {getPredictionsByMatch,doPrediction} from './predictions'\r\nimport {getUser, registerUser} from './user'\r\n\r\nexport default {\r\n  getGames,\r\n  getTournaments,\r\n  getSquads,\r\n  getPredictionsByMatch,\r\n  doPrediction,\r\n  getUser,\r\n  registerUser,\r\n}","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\games.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\tournaments.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\squads.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\BASE_URL.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\request.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\tournament.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\team.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\game.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Headers\\PlainHeader.tsx",["175"],"import React from 'react';\r\n\r\nimport {Avatar, Div, Link} from '@vkontakte/vkui';\r\nimport { Icon24Globe } from '@vkontakte/icons';\r\n\r\ninterface PlainHeaderProps\r\n{\r\n  logo ?: string\r\n  title : string\r\n  league ?: string\r\n  city : string\r\n  hrefs ?: string[]\r\n}\r\n\r\nconst PlainHeader : React.FC<PlainHeaderProps> = ({\r\n  logo,\r\n  title,\r\n  city,\r\n  hrefs,\r\n}) => {\r\n  return(\r\n    <Div style={{display:'flex'}}>\r\n      {logo && <Avatar mode=\"image\" size={74} src={logo}/>}\r\n      <div>\r\n        <h3 style={{padding:0, margin:0, marginLeft: logo ? 8 : 0}}>{title}</h3>\r\n        <h5 style={{padding:0, margin:0,marginTop:4,marginLeft: logo ? 8 : 0,color:'gray'}}>{city}</h5>\r\n        {hrefs &&\r\n          <div style={{fontSize:14,marginTop:4}}>\r\n            {hrefs.map((href,i) => {\r\n              return href && <Link key={i} style={{marginRight:4}} href={href}>\r\n                {['Сайт','Группа'][i]}\r\n              </Link>\r\n            })}\r\n          </div>\r\n        }\r\n      </div>\r\n\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default PlainHeader","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Headers\\GameHeader.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\GameInfoTabs\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\GamesList\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Table\\TableRow.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\EventRow\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\ListHeader\\index.tsx",[],["176","177"],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\user.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\components\\Prediction\\index.tsx",["178"],"import React from 'react';\r\nimport './Prediction.sass';\r\n\r\nimport { Card, Div, Header, Spinner } from '@vkontakte/vkui';\r\nimport { PredictionInfo } from '../../types/PredictionInfo';\r\nimport { Icon12Verified } from '@vkontakte/icons';\r\n\r\ninterface PredictionProps\r\n{\r\n  title : string\r\n  variants : string[]\r\n  onPrediction : (variant : 0 | 1) => void\r\n  loading : boolean\r\n  predictionsInfo : PredictionInfo | null\r\n  userPrediction : 0 | 1 | null\r\n  canPredict : boolean\r\n}\r\n\r\nconst Prediction : React.FC<PredictionProps> = ({\r\n  title,\r\n  variants,\r\n  onPrediction,\r\n  loading,\r\n  predictionsInfo,\r\n  userPrediction,\r\n  canPredict,\r\n}) => {\r\n  const [activeVariant, setActiveVariant] = React.useState<0 | 1 | null>(userPrediction)\r\n  const doPrediction = (predict : 0|1) => {\r\n    if(loading || userPrediction !== null || !canPredict) return\r\n\r\n    setActiveVariant(predict)\r\n    onPrediction(predict)\r\n  }\r\n\r\n  return(\r\n    <Div>\r\n      <Card style={{display:'flex',flexDirection:'column'}}>\r\n        <Header>{title}</Header>\r\n        {loading\r\n          ? <Div><Spinner/></Div>\r\n          : <Div>\r\n            {variants.map((variant,i) => {\r\n              return <div\r\n                key={i}\r\n                className=\"prediction__btn\"\r\n                onClick={() => doPrediction(i as 0|1)}\r\n                style={{background : (!canPredict || userPrediction !== null) ? 'rgba(0,0,0,0.3)' : ''}}\r\n              >\r\n                <div className=\"prediction__variant\">\r\n                  {variant}\r\n                  {predictionsInfo && ` - ${i === 0 ? predictionsInfo.over : predictionsInfo.under}`}                  \r\n                </div>\r\n                {predictionsInfo &&\r\n                  <div className=\"prediction__stat\">\r\n                    {(userPrediction==i || activeVariant === i) && <Icon12Verified/>}\r\n                    {predictionsInfo.over + predictionsInfo.under === 0\r\n                      ? 0\r\n                      : (([predictionsInfo.over,predictionsInfo.under][i]/(predictionsInfo.over + predictionsInfo.under))*100).toFixed(0)\r\n                    }%\r\n                  </div>\r\n                }\r\n              </div>\r\n            })}\r\n          </Div>\r\n        }\r\n\r\n      </Card>\r\n    </Div>\r\n  )\r\n}\r\n\r\nexport default Prediction","C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\predictions.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\predictions.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\api\\user.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\utils\\nowLessThen.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl-client\\src\\store\\slices\\popout.ts",[],{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"183","severity":1,"message":"184","line":4,"column":9,"nodeType":"185","messageId":"186","endLine":4,"endColumn":27},{"ruleId":"187","severity":1,"message":"188","line":39,"column":5,"nodeType":"189","endLine":39,"endColumn":7,"suggestions":"190"},{"ruleId":"183","severity":1,"message":"191","line":18,"column":10,"nodeType":"185","messageId":"186","endLine":18,"endColumn":22},{"ruleId":"183","severity":1,"message":"192","line":19,"column":10,"nodeType":"185","messageId":"186","endLine":19,"endColumn":27},{"ruleId":"183","severity":1,"message":"193","line":29,"column":10,"nodeType":"185","messageId":"186","endLine":29,"endColumn":20},{"ruleId":"194","severity":1,"message":"195","line":102,"column":37,"nodeType":"196","messageId":"197","endLine":102,"endColumn":43},{"ruleId":"183","severity":1,"message":"198","line":5,"column":3,"nodeType":"185","messageId":"186","endLine":5,"endColumn":6},{"ruleId":"183","severity":1,"message":"199","line":6,"column":3,"nodeType":"185","messageId":"186","endLine":6,"endColumn":8},{"ruleId":"183","severity":1,"message":"200","line":11,"column":3,"nodeType":"185","messageId":"186","endLine":11,"endColumn":10},{"ruleId":"183","severity":1,"message":"201","line":24,"column":8,"nodeType":"185","messageId":"186","endLine":24,"endColumn":16},{"ruleId":"183","severity":1,"message":"202","line":42,"column":11,"nodeType":"185","messageId":"186","endLine":42,"endColumn":26},{"ruleId":"183","severity":1,"message":"203","line":42,"column":28,"nodeType":"185","messageId":"186","endLine":42,"endColumn":35},{"ruleId":"183","severity":1,"message":"204","line":44,"column":48,"nodeType":"185","messageId":"186","endLine":44,"endColumn":68},{"ruleId":"179","replacedBy":"205"},{"ruleId":"181","replacedBy":"206"},{"ruleId":"187","severity":1,"message":"207","line":115,"column":5,"nodeType":"189","endLine":115,"endColumn":7,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":7,"column":1,"nodeType":"211","endLine":15,"endColumn":2},{"ruleId":"183","severity":1,"message":"212","line":4,"column":10,"nodeType":"185","messageId":"186","endLine":4,"endColumn":21},{"ruleId":"179","replacedBy":"213"},{"ruleId":"181","replacedBy":"214"},{"ruleId":"215","severity":1,"message":"216","line":56,"column":37,"nodeType":"217","messageId":"218","endLine":56,"endColumn":39},"no-native-reassign",["219"],"no-negated-in-lhs",["220"],"@typescript-eslint/no-unused-vars","'AdaptivityProvider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["221"],"'requestSquad' is defined but never used.","'setActiveGameInfo' is defined but never used.","'GAME_PANEL' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'Div' is defined but never used.","'Group' is defined but never used.","'Spinner' is defined but never used.","'TableRow' is defined but never used.","'activeTeamSquad' is assigned a value but never used.","'loading' is assigned a value but never used.","'activeTournamentName' is assigned a value but never used.",["219"],["220"],"React Hook React.useEffect has missing dependencies: 'activeGameEvents', 'activeGameInfo.matchHref', 'canPredict', 'dispatch', and 'user'. Either include them or remove the dependency array.",["222"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Icon24Globe' is defined but never used.",["219"],["220"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},"Update the dependencies array to be: [dispatch]",{"range":"227","text":"228"},"Update the dependencies array to be: [activeGameEvents, activeGameInfo.matchHref, canPredict, dispatch, user]",{"range":"229","text":"230"},[1820,1822],"[dispatch]",[3747,3749],"[activeGameEvents, activeGameInfo.matchHref, canPredict, dispatch, user]"]