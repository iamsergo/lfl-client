[{"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\index.tsx":"1","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\store.ts":"2","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\App.tsx":"3","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\rootReducer.ts":"4","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\team.ts":"5","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\user.ts":"6","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\navigation.ts":"7","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\predictions.ts":"8","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\tournaments.ts":"9","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\tournament.ts":"10","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\game.ts":"11","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\league.ts":"12","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\constans\\index.ts":"13","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Tournaments\\index.tsx":"14","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Tournament\\index.tsx":"15","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\AddWidget\\index.tsx":"16","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Team\\index.tsx":"17","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Game\\index.tsx":"18","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\League\\index.tsx":"19","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\index.ts":"20","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\BASE_URL.ts":"21","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\utils\\nowLessThen.ts":"22","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Headers\\PlainHeader.tsx":"23","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Headers\\GameHeader.tsx":"24","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\widget.ts":"25","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\user.ts":"26","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\squads.ts":"27","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\games.ts":"28","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\tournaments.ts":"29","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\predictions.ts":"30","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\GamesList\\index.tsx":"31","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Actions\\index.tsx":"32","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\GameInfoTabs\\index.tsx":"33","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\EventRow\\index.tsx":"34","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\utils\\getGamesByTour.ts":"35","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Table\\TableRow.tsx":"36","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\request.ts":"37","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Score\\index.tsx":"38"},{"size":584,"mtime":1613115226949,"results":"39","hashOfConfig":"40"},{"size":291,"mtime":1611856366447,"results":"41","hashOfConfig":"40"},{"size":4520,"mtime":1612958427017,"results":"42","hashOfConfig":"40"},{"size":611,"mtime":1612609913838,"results":"43","hashOfConfig":"40"},{"size":2087,"mtime":1612113083100,"results":"44","hashOfConfig":"40"},{"size":1302,"mtime":1612086632767,"results":"45","hashOfConfig":"40"},{"size":1281,"mtime":1612676185931,"results":"46","hashOfConfig":"40"},{"size":1951,"mtime":1612089898128,"results":"47","hashOfConfig":"40"},{"size":1450,"mtime":1611998738393,"results":"48","hashOfConfig":"40"},{"size":2232,"mtime":1612894391702,"results":"49","hashOfConfig":"40"},{"size":2546,"mtime":1612907021060,"results":"50","hashOfConfig":"40"},{"size":511,"mtime":1612609572046,"results":"51","hashOfConfig":"40"},{"size":244,"mtime":1612636914666,"results":"52","hashOfConfig":"40"},{"size":5713,"mtime":1612947553835,"results":"53","hashOfConfig":"40"},{"size":6037,"mtime":1613052361952,"results":"54","hashOfConfig":"40"},{"size":10978,"mtime":1613116265776,"results":"55","hashOfConfig":"40"},{"size":3807,"mtime":1612947601494,"results":"56","hashOfConfig":"40"},{"size":7429,"mtime":1612947952399,"results":"57","hashOfConfig":"40"},{"size":5547,"mtime":1613052816014,"results":"58","hashOfConfig":"40"},{"size":450,"mtime":1612694515456,"results":"59","hashOfConfig":"40"},{"size":108,"mtime":1613116523731,"results":"60","hashOfConfig":"40"},{"size":237,"mtime":1612088675264,"results":"61","hashOfConfig":"40"},{"size":834,"mtime":1612947706489,"results":"62","hashOfConfig":"40"},{"size":1165,"mtime":1612947715994,"results":"63","hashOfConfig":"40"},{"size":697,"mtime":1613114739804,"results":"64","hashOfConfig":"40"},{"size":458,"mtime":1612086598622,"results":"65","hashOfConfig":"40"},{"size":272,"mtime":1611778173653,"results":"66","hashOfConfig":"40"},{"size":382,"mtime":1612876996466,"results":"67","hashOfConfig":"40"},{"size":411,"mtime":1612546969012,"results":"68","hashOfConfig":"40"},{"size":638,"mtime":1612081063560,"results":"69","hashOfConfig":"40"},{"size":2009,"mtime":1612947729467,"results":"70","hashOfConfig":"40"},{"size":2465,"mtime":1612946180177,"results":"71","hashOfConfig":"40"},{"size":1133,"mtime":1612877533255,"results":"72","hashOfConfig":"40"},{"size":1034,"mtime":1612881877670,"results":"73","hashOfConfig":"40"},{"size":354,"mtime":1611816832719,"results":"74","hashOfConfig":"40"},{"size":1287,"mtime":1612108879539,"results":"75","hashOfConfig":"40"},{"size":104,"mtime":1611778010684,"results":"76","hashOfConfig":"40"},{"size":323,"mtime":1612942843346,"results":"77","hashOfConfig":"40"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ckm36c",{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"82"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\store.ts",[],["159","160"],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\App.tsx",["161"],"import React from 'react';\r\n\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport {AppRoot, ConfigProvider, ScreenSpinner, View} from '@vkontakte/vkui';\r\n\r\nimport TournamentPanel from './panels/Tournament';\r\nimport TeamPanel from './panels/Team';\r\nimport GamePanel from './panels/Game';\r\nimport TournamentsPanel from './panels/Tournaments';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from './store/rootReducer';\r\nimport { ADD_WIDGET_PANEL, GAME_PANEL, LEAGUE_PANEL, TEAM_PANEL, TOURNAMENTS_PANEL, TOURNAMENT_PANEL } from './constans';\r\nimport { requestTournaments } from './store/slices/tournaments';\r\nimport { requestUser } from './store/slices/user';\r\nimport { goBack } from './store/slices/navigation';\r\nimport { clearActiveGame, goBackToGame } from './store/slices/game';\r\nimport { clearActiveteam, goBackToTeam } from './store/slices/team';\r\nimport { clearPredictionsInfo } from './store/slices/predictions';\r\nimport { setNavigation } from './store/slices/navigation';\r\nimport { clearActiveTournament, setActiveTab as setActiveTournamentTab } from './store/slices/tournament';\r\nimport { setActiveTab as setActiveTeamTab } from './store/slices/team';\r\nimport LeaguePanel from './panels/League';\r\nimport { useAppDispatch } from './store/store';\r\nimport { setActiveLeague } from './store/slices/league';\r\nimport { CityInfo } from './types/CityInfo';\r\nimport AddWidgetPanel from './panels/AddWidget';\r\n\r\nconst App = () => {\r\n  const dispatch = useAppDispatch()\r\n  const {activePanel, history} = useSelector((s:RootState) => s.navigation)\r\n  const {loading : loadingTournaments, cities} = useSelector((s:RootState) => s.tournaments)\r\n  const {loading : loadingTournament} = useSelector((s:RootState) => s.tournament)\r\n  const {loading : loadingUser} = useSelector((s:RootState) => s.user)\r\n\r\n  React.useEffect(() => {\r\n    const initPanels = async (cities : CityInfo[]) => {\r\n      try\r\n      {\r\n        const hash = window.location.hash\r\n        const {keys} = await bridge.send('VKWebAppStorageGet',{keys:['favorite']})\r\n        const favorite = keys.find(entrie => entrie.key === 'favorite')\r\n\r\n        if(hash)\r\n        {\r\n          const id = +hash.slice(1).replace('league','')\r\n          dispatch(setActiveLeague(cities.find(c => c.id === id)))\r\n          dispatch(setNavigation({activePanel:LEAGUE_PANEL,history:[TOURNAMENTS_PANEL,LEAGUE_PANEL]}))\r\n        }\r\n        else if(favorite && favorite.value !== '')\r\n        {\r\n          const id = +favorite.value.replace('league','')\r\n          dispatch(setActiveLeague(cities.find(c => c.id === id)))\r\n          dispatch(setNavigation({activePanel:LEAGUE_PANEL,history:[TOURNAMENTS_PANEL,LEAGUE_PANEL]}))\r\n        }\r\n      }\r\n      catch(err){}\r\n    }\r\n\r\n    const initApp = async () => {\r\n      const userInfo = await bridge.send('VKWebAppGetUserInfo')\r\n      // const userInfo = {id : 17}\r\n      dispatch(requestUser(userInfo.id))\r\n      dispatch(requestTournaments())\r\n        .then((action) => initPanels(action.payload))\r\n      bridge.send('VKWebAppEnableSwipeBack').then(res=>res).catch(err=>err)\r\n    }\r\n    \r\n    initApp()\r\n  },[])\r\n\r\n  const goToBack = () => {\r\n    const currentPanel = history[history.length-1]\r\n    const newPanel = history[history.length-2]\r\n    \r\n    if(currentPanel === 'team')\r\n    {\r\n      if(newPanel === 'game') dispatch(goBackToGame())\r\n\r\n      dispatch(clearActiveteam())\r\n    }\r\n    else if(currentPanel === 'game')\r\n    {\r\n      if(newPanel === 'team') dispatch(goBackToTeam())\r\n\r\n      dispatch(clearActiveGame())\r\n      dispatch(clearPredictionsInfo())\r\n    }\r\n    \r\n    if(newPanel === 'league')\r\n    {\r\n      dispatch(setActiveTournamentTab(0))\r\n      dispatch(clearActiveTournament())\r\n    }\r\n    else if(newPanel === 'tournament')\r\n    {\r\n      dispatch(setActiveTeamTab(0))\r\n    }\r\n\r\n    dispatch(goBack())\r\n  }\r\n\r\n  return (\r\n    <ConfigProvider isWebView={true}>\r\n      <AppRoot>\r\n        <View\r\n          activePanel={activePanel}\r\n          onSwipeBack={goToBack}\r\n          history={history}\r\n          popout={(loadingTournaments || loadingUser || loadingTournament) && <ScreenSpinner />}\r\n        >\r\n          <TournamentsPanel id={TOURNAMENTS_PANEL} cities={cities}/>\r\n          <LeaguePanel id={LEAGUE_PANEL} />\r\n          <TournamentPanel id={TOURNAMENT_PANEL}/>\r\n          <GamePanel id={GAME_PANEL}/>\r\n          <TeamPanel id={TEAM_PANEL}/>\r\n          <AddWidgetPanel id={ADD_WIDGET_PANEL} />\r\n        </View>\r\n      </AppRoot>\r\n    </ConfigProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\rootReducer.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\team.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\user.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\navigation.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\predictions.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\tournaments.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\tournament.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\game.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\store\\slices\\league.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\constans\\index.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Tournaments\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Tournament\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\AddWidget\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Team\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\Game\\index.tsx",["162"],"import React from 'react';\r\n\r\nimport {\r\n  Div,\r\n  Link,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelHeaderBack,\r\n  Placeholder,\r\n  Spinner} from '@vkontakte/vkui';\r\n\r\nimport { useSelector } from 'react-redux';\r\nimport { goBack, goForward } from '../../store/slices/navigation';\r\nimport { RootState } from '../../store/rootReducer';\r\nimport { goBackToTeam, setActiveTeam } from '../../store/slices/team';\r\nimport { clearActiveGame, goForwardToGame, requestGame } from '../../store/slices/game';\r\nimport {useAppDispatch} from '../../store/store';\r\n\r\nimport GameHeader from '../../components/Headers/GameHeader';\r\nimport GameInfoTabs from '../../components/GameInfoTabs';\r\nimport EventRow from '../../components/EventRow';\r\n\r\nimport { TEAM_PANEL } from '../../constans';\r\n\r\nimport { ClubInfo } from '../../types/ClubInfo';\r\nimport { requestPredictions, clearPredictionsInfo } from '../../store/slices/predictions';\r\nimport { nowLessThen } from '../../utils/nowLessThen';\r\n\r\ninterface GamePanelProps\r\n{\r\n  id : string\r\n}\r\n\r\n// const TABS = [ 'События', 'Составы',]\r\n\r\nconst GamePanel : React.FC<GamePanelProps> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useAppDispatch()\r\n  const {history} = useSelector((s:RootState) => s.navigation)\r\n  const {activeGameInfo,activeGameEvents,loading, error} = useSelector((s:RootState) => s.game)\r\n  const {activeTournament,activeSiteType,activeDivisionId} = useSelector((s:RootState) => s.tournament)\r\n  const {user} = useSelector((s:RootState) => s.user)\r\n\r\n  const [activeTab] = React.useState(0)\r\n  const [, setUserPrediction] = React.useState<0|1|null>(null)\r\n\r\n  const canPredict = nowLessThen(\r\n    activeGameInfo.date.split(' ')[0].split('.').map(s=>+s),\r\n    activeGameInfo.time.split(':').map(s=>+s)\r\n  )\r\n\r\n  const goToBack = () => {\r\n    const isToTeam = history[history.length-2] === 'team'\r\n    if(isToTeam) dispatch(goBackToTeam())\r\n    \r\n    dispatch(goBack())\r\n    dispatch(clearActiveGame())\r\n    dispatch(clearPredictionsInfo())\r\n  }\r\n\r\n  const goToTeam = (team : ClubInfo) => {\r\n\r\n    dispatch(goForwardToGame())\r\n    \r\n    dispatch(setActiveTeam(team))\r\n    dispatch(goForward(TEAM_PANEL))\r\n\r\n    dispatch(clearActiveGame())\r\n    dispatch(clearPredictionsInfo())\r\n\r\n    // dispatch(requestSquad({tournamentId, clubId}))\r\n  }\r\n\r\n\r\n  React.useEffect(() => {\r\n    if(activeGameEvents) return\r\n\r\n    if(activeGameInfo.matchHref.includes('/empty_protocol'))\r\n    {\r\n      const matchId = +activeGameInfo.matchHref.replace('/match','').replace('/empty_protocol','')\r\n      const prediction = user!.predictions.find(p => p.matchId === matchId)\r\n      if(prediction)\r\n      {\r\n        setUserPrediction(prediction.prediction)\r\n      }\r\n\r\n      if(!canPredict || !!prediction)\r\n        dispatch(requestPredictions(matchId))\r\n      return\r\n    }\r\n\r\n    const postfix = activeSiteType === 0\r\n      ? (activeDivisionId\r\n        ? `/division${activeDivisionId}/tour${activeGameInfo.tour}`\r\n        : `/tournament${activeTournament!.tournamentId}/tour${activeGameInfo.tour}`\r\n      )\r\n      : activeGameInfo.matchHref\r\n\r\n    const matchId = activeSiteType === 0 ? activeGameInfo.matchHref.replace('/match','') : ''\r\n\r\n    const req = dispatch(requestGame({\r\n      postfix,\r\n      siteType : activeSiteType,\r\n      matchId,\r\n    }) )\r\n    return () => {\r\n      req.abort()\r\n    }\r\n  },[])\r\n\r\n  const home = {\r\n    name : activeGameInfo.homeName,\r\n    href : activeGameInfo.homeHref,\r\n    logo : activeGameInfo.homeLogo,\r\n  }\r\n  \r\n  const away = {\r\n    name : activeGameInfo.awayName,\r\n    href : activeGameInfo.awayHref,\r\n    logo : activeGameInfo.awayLogo,\r\n  }\r\n\r\n\r\n  return(\r\n    <Panel id={id}>\r\n      <PanelHeader\r\n        left={<PanelHeaderBack onClick={goToBack} />}\r\n      >Матч</PanelHeader>\r\n\r\n      <GameHeader\r\n        home={home}\r\n        away={away}\r\n        score={!activeGameInfo.score ? '-:-' : activeGameInfo.score}\r\n        onGoToTeam={goToTeam}\r\n      />\r\n\r\n      <GameInfoTabs\r\n        date={activeGameInfo.date !== '-' ? `${activeGameInfo.date}, ${activeGameInfo.time}` : null}\r\n        refery={activeGameEvents && activeGameEvents.refery !== '-' ? activeGameEvents.refery : null}\r\n        place={activeGameEvents && activeGameEvents.place !== '-' ? activeGameEvents.place : null}\r\n      />\r\n\r\n      {/* {!loading && !noInformation && activeGameInfo.score &&\r\n        <HorizontalScroll>\r\n          <Tabs mode=\"buttons\">\r\n            {TABS.map((tab,i) => {\r\n              return <TabsItem\r\n                key={i}\r\n                selected={activeTab === i}\r\n                onClick={() => setActiveTab(i)}\r\n              >{tab}</TabsItem>\r\n            })}\r\n          </Tabs>\r\n        </HorizontalScroll>\r\n      } */}\r\n      \r\n      {/* {!activeGameInfo.score &&\r\n        <Prediction\r\n          canPredict={canPredict}\r\n          userPrediction={userPrediction}\r\n          predictionsInfo={predictionsInfo}\r\n          loading={loadingPrediction}\r\n          title=\"Количество голов\"\r\n          variants={['Больше 7', 'Не больше 7']}\r\n          onPrediction={doPredict}\r\n        />\r\n      } */}\r\n\r\n      {error &&\r\n        <Placeholder>\r\n          Произошла ошибка, попробуйте посмотреть информацию на\r\n          <Link\r\n            href={activeSiteType === 0\r\n              ? (activeDivisionId\r\n                ? `https://www.lfl.ru/division${activeDivisionId}/tour${activeGameInfo.tour}`\r\n                : `https://www.lfl.ru/tournament${activeTournament!.tournamentId}/tour${activeGameInfo.tour}`\r\n              )\r\n              : `http://www.goalstream.org${activeGameInfo.matchHref}`}\r\n          >&nbsp;сайте</Link>\r\n        </Placeholder>\r\n      }\r\n\r\n      {activeGameEvents && activeGameEvents.events.length === 0 && <Placeholder>Нет информации</Placeholder>}\r\n      \r\n      {loading && <>\r\n        <Div><Spinner/></Div>\r\n        <Placeholder>Загрузка займет некоторое время. Пожалуйста, подождите</Placeholder>\r\n      </>}\r\n\r\n\r\n      {!loading && activeTab === 0 && activeGameEvents &&\r\n        activeGameEvents.events.map((e,i) => {\r\n          let eventSymbol = ''\r\n          if(e.type === 'goal') eventSymbol = '⚽'\r\n          else if(e.type === 'assist') eventSymbol = '✅'\r\n          else if(e.type === 'yc') eventSymbol = '🟨'\r\n          else eventSymbol = '🟥'\r\n          \r\n          return <EventRow\r\n            key={i}\r\n            playerName={e.name}\r\n            eventType={eventSymbol}\r\n            isHome={e.team === 0}\r\n            minute={e.minute}\r\n          />\r\n        })\r\n      }\r\n\r\n      {/* {!loading && activeTab === 1 && <>\r\n        <Tabs mode=\"buttons\">\r\n          {[activeGameInfo.homeName,activeGameInfo.awayName].map((team,i) => {\r\n            return <TabsItem\r\n              key={i}\r\n              selected={activeTeamTab === i}\r\n              onClick={() => setActiveTeamTab(i)}\r\n            >{team}</TabsItem>\r\n          })}\r\n        </Tabs>\r\n        <List>\r\n          {activeGameEvents &&\r\n            activeGameEvents.squads[activeTeamTab].map((player,i) => {\r\n              return <Cell\r\n                disabled\r\n                key={i}\r\n                description={activeGameInfo[activeTeamTab === 0 ? 'homeName' : 'awayName']}\r\n              >{player.name}</Cell>\r\n            })\r\n          }\r\n        </List>\r\n      </>} */}\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default GamePanel","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\panels\\League\\index.tsx",["163","164"],"import React from 'react';\r\n\r\nimport bridge from '@vkontakte/vk-bridge'\r\nimport {\r\n  Avatar,\r\n  Card,\r\n  Cell,\r\n  CellButton,\r\n  Div,\r\n  Panel,\r\n  PanelHeader,\r\n  PanelHeaderBack,\r\n  Placeholder,\r\n  Snackbar,\r\n} from '@vkontakte/vkui';\r\nimport { Icon16DoneCircle, Icon28ChevronRightOutline,Icon24Copy, Icon24Add, Icon28FavoriteOutline, Icon28UnfavoriteOutline } from '@vkontakte/icons';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { goBack, goForward } from '../../store/slices/navigation';\r\nimport { RootState } from '../../store/rootReducer';\r\n\r\nimport { ADD_WIDGET_PANEL, TOURNAMENT_PANEL } from '../../constans';\r\nimport PlainHeader from '../../components/Headers/PlainHeader';\r\nimport { requestTournament, setActiveTournament } from '../../store/slices/tournament';\r\nimport { Tournament } from '../../types/Tournament';\r\nimport Actions from '../../components/Actions';\r\n\r\ninterface LeaguePanelProps\r\n{\r\n  id : string\r\n}\r\n\r\nconst LeaguePanel : React.FC<LeaguePanelProps> = ({\r\n  id,\r\n}) => {\r\n  const dispatch = useDispatch()\r\n  const {activeLeague} = useSelector((s:RootState) => s.league)\r\n  const {user} = useSelector((s:RootState) => s.user)\r\n\r\n  const goToBack = () => {\r\n    dispatch(goBack())\r\n  }\r\n\r\n  const goToTournament = (t : Tournament) => {\r\n    dispatch(goForward(TOURNAMENT_PANEL))\r\n    dispatch(setActiveTournament(t))\r\n    dispatch(requestTournament({tournamentId : +t.id, siteType : t.siteType }))\r\n  }\r\n\r\n  const [snackbar, setSnackbar] = React.useState<React.ReactElement | null>(null)\r\n  const openSnackbar = (text : string) => {\r\n    setSnackbar(\r\n      <Snackbar\r\n        before={\r\n          <Avatar size={24} style={{backgroundColor:'var(--accent)'}}>\r\n            <Icon16DoneCircle fill=\"#fff\" width={14} height={14} />\r\n          </Avatar>\r\n        }\r\n        onClose={() => setSnackbar(null)}\r\n      >{text}</Snackbar>\r\n    )\r\n  }\r\n\r\n  const copyLink = () => {\r\n    bridge.send('VKWebAppCopyText',{text:`https://vk.com/app7746401#league${activeLeague!.id}`})\r\n      .then(_ => openSnackbar('Скопировано'))\r\n      .catch(e=>e)\r\n  }\r\n\r\n  const goToAddWidget = () => {\r\n    dispatch(goForward(ADD_WIDGET_PANEL))\r\n  }\r\n\r\n  const [openThisLeague,setOpenThisLeague] = React.useState(false)\r\n  React.useEffect(() => {\r\n    const init = async () => {\r\n      try\r\n      {\r\n        const {keys} = await bridge.send('VKWebAppStorageGet',{keys:['favorite']})\r\n        const favorite = keys.find(entrie => entrie.key === 'favorite')\r\n        if(!favorite)\r\n          setOpenThisLeague(false)\r\n        else\r\n          setOpenThisLeague(favorite.value === `league${activeLeague!.id}`)\r\n      }\r\n      catch(err){}\r\n    }\r\n\r\n    init()\r\n  },[])\r\n\r\n  const toggleOpenThisLeague = async () => {\r\n    try\r\n    {\r\n      await bridge.send('VKWebAppStorageSet',{\r\n        key:'favorite',\r\n        value: openThisLeague ? '' : `league${activeLeague!.id}`\r\n      })\r\n\r\n      setOpenThisLeague(!openThisLeague)\r\n    }\r\n    catch(err){}\r\n  }\r\n\r\n  return(\r\n    <Panel id={id}>\r\n      <PanelHeader\r\n        left={<PanelHeaderBack onClick={goToBack} />}\r\n      >Лига</PanelHeader>\r\n\r\n      {activeLeague\r\n        ? <>\r\n\r\n            <PlainHeader\r\n              href={activeLeague.vkHref}\r\n              hrefText={'Группа'}\r\n              logo={activeLeague.tournaments[0].logo}\r\n              title={activeLeague.title}\r\n            />\r\n\r\n            <Div style={{paddingBottom:0}}>\r\n              <Card>\r\n                {activeLeague.tournaments.map((t,i) => {\r\n                  return <Cell\r\n                    key={i}\r\n                    after={<Icon28ChevronRightOutline/>}\r\n                    onClick={() => goToTournament(t)}\r\n                  >{t.name}</Cell>\r\n                })}\r\n              </Card>\r\n            </Div>\r\n\r\n            <Actions openSnackbar={openSnackbar} />\r\n\r\n            <Div style={{paddingTop:0}}>\r\n              <Card>\r\n                <CellButton\r\n                  style={{color: !openThisLeague ? 'orange' : 'red'}}\r\n                  before={\r\n                    !openThisLeague\r\n                      ? <Icon28FavoriteOutline style={{marginRight:8,color:'orange'}}/>\r\n                      : <Icon28UnfavoriteOutline style={{marginRight:8,color:'red'}}/>\r\n                  }\r\n                  onClick={toggleOpenThisLeague}\r\n                >{\r\n                  !openThisLeague\r\n                    ? 'Открывать сразу эту лигу'\r\n                    : 'Не открывать сразу эту лигу'\r\n                }</CellButton>\r\n                <CellButton\r\n                  before={<Icon24Copy style={{marginRight:8}}/>}\r\n                  onClick={copyLink}\r\n                  description=\"Прямая ссылка на эту страницу\"\r\n                >Скопировать ссылку на лигу</CellButton>\r\n\r\n                <CellButton\r\n                  before={<Icon24Add style={{marginRight:8}}/>}\r\n                  onClick={goToAddWidget}\r\n                  description=\"Для администраторов групп\"\r\n                >Добавить виджет в группу</CellButton>\r\n              </Card>\r\n            </Div>\r\n          </>\r\n        : <Placeholder>Ничего не найдено. Попробуйте найти турнир в\r\n          <span\r\n            style={{color:'var(--accent)'}}\r\n            onClick={goToBack}\r\n          > списке</span>\r\n        </Placeholder>\r\n      }\r\n\r\n      {snackbar}\r\n    </Panel>\r\n  )\r\n}\r\n\r\nexport default LeaguePanel","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\index.ts",["165"],"import {getGames} from './games'\r\nimport {getTournaments, getTournament} from './tournaments'\r\nimport {getSquads} from './squads'\r\nimport {getPredictionsByMatch,doPrediction} from './predictions'\r\nimport {getUser, registerUser} from './user'\r\nimport {addWidget} from './widget'\r\n\r\nexport default {\r\n  getGames,\r\n  getTournaments,\r\n  getTournament,\r\n  getSquads,\r\n  getPredictionsByMatch,\r\n  doPrediction,\r\n  getUser,\r\n  registerUser,\r\n  addWidget,\r\n}","C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\BASE_URL.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\utils\\nowLessThen.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Headers\\PlainHeader.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Headers\\GameHeader.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\widget.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\user.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\squads.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\games.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\tournaments.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\predictions.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\GamesList\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Actions\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\GameInfoTabs\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\EventRow\\index.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\utils\\getGamesByTour.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Table\\TableRow.tsx",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\api\\request.ts",[],"C:\\Users\\Lenovo\\Desktop\\lfl\\client\\src\\components\\Score\\index.tsx",[],{"ruleId":"166","replacedBy":"167"},{"ruleId":"168","replacedBy":"169"},{"ruleId":"170","severity":1,"message":"171","line":69,"column":5,"nodeType":"172","endLine":69,"endColumn":7,"suggestions":"173"},{"ruleId":"170","severity":1,"message":"174","line":110,"column":5,"nodeType":"172","endLine":110,"endColumn":7,"suggestions":"175"},{"ruleId":"176","severity":1,"message":"177","line":38,"column":10,"nodeType":"178","messageId":"179","endLine":38,"endColumn":14},{"ruleId":"170","severity":1,"message":"180","line":90,"column":5,"nodeType":"172","endLine":90,"endColumn":7,"suggestions":"181"},{"ruleId":"182","severity":1,"message":"183","line":8,"column":1,"nodeType":"184","endLine":18,"endColumn":2},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["187"],"React Hook React.useEffect has missing dependencies: 'activeDivisionId', 'activeGameEvents', 'activeGameInfo.matchHref', 'activeGameInfo.tour', 'activeSiteType', 'activeTournament', 'canPredict', 'dispatch', and 'user'. Either include them or remove the dependency array.",["188"],"@typescript-eslint/no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has a missing dependency: 'activeLeague'. Either include it or remove the dependency array.",["189"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},"Update the dependencies array to be: [dispatch]",{"range":"196","text":"197"},"Update the dependencies array to be: [activeDivisionId, activeGameEvents, activeGameInfo.matchHref, activeGameInfo.tour, activeSiteType, activeTournament, canPredict, dispatch, user]",{"range":"198","text":"199"},"Update the dependencies array to be: [activeLeague]",{"range":"200","text":"201"},[3114,3116],"[dispatch]",[3310,3312],"[activeDivisionId, activeGameEvents, activeGameInfo.matchHref, activeGameInfo.tour, activeSiteType, activeTournament, canPredict, dispatch, user]",[2680,2682],"[activeLeague]"]